on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      DATABASE_ENGINE: ${{ secrets.DATABASE_ENGINE}}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
      BASE_URL: ${{ secrets.BASE_URL}}
      DATABASE_POOL_SIZE: ${{ secrets.DATABASE_POOL_SIZE}}

    steps:
      - uses: actions/checkout@v4

      - name: Create .env from secrets
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DATABASE_POOL_SIZE=${{ secrets.DATABASE_POOL_SIZE }}" >> .env

      - name: Create .env files for all test environments
        run: |
          mkdir -p test_env
          echo "BASE_URL=${{ secrets.BASE_URL }}" > test_env/.env.dev
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> test_env/.env.dev
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> test_env/.env.dev
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> test_env/.env.dev
          echo "DATABASE_POOL_SIZE=${{ secrets.DATABASE_POOL_SIZE }}" >> test_env/.env.dev
      
          echo "BASE_URL=${{ secrets.BASE_URL }}" > test_env/.env.stage
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> test_env/.env.stage
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> test_env/.env.stage
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> test_env/.env.stage
          echo "DATABASE_POOL_SIZE=${{ secrets.DATABASE_POOL_SIZE }}" >> test_env/.env.stage
      
          echo "BASE_URL=${{ secrets.BASE_URL }}" > test_env/.env.prod
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> test_env/.env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> test_env/.env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> test_env/.env.prod
          echo "DATABASE_POOL_SIZE=${{ secrets.DATABASE_POOL_SIZE }}" >> test_env/.env.prod

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-venv-${{ runner.os }}-

      - name: Install dependencies (with Poetry)
        run: |
          poetry install --no-interaction --no-ansi

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz
          tar -xzf allure-2.34.0.tgz
          sudo mv allure-2.34.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version

      - name: Run docker-compose
        run: |
          docker compose up -d --build

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h db -p 5432 && break || sleep 2
          done

      - name: Run tests and generate Allure reports for all environments
        run: |
          for env in dev stage prod; do
            poetry run pytest --env=$env --alluredir=allure-results-$env
            allure generate allure-results-$env --clean -o allure-report-$env
          done

      - name: Prepare Allure reports for all environments
        run: |
          mkdir -p allure-multi-report
          mv allure-report-dev allure-multi-report/dev
          mv allure-report-stage allure-multi-report/stage
          mv allure-report-prod allure-multi-report/prod    

      - name: Docker-compose logs
        if: always()
        run: |
          docker compose logs api

      - name: Publish Allure Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-multi-report
          publish_branch: gh-pages

  release:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - run: gh release create v$(git rev-parse --short HEAD) --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - run: echo "Deploy is successful!"